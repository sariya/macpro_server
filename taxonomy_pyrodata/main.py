#!/usr/bin/env python

__author__ = "Sanjeev Sariya"
__date__= "June 14 2017"
__maintainer__= "Sanjeev Sariya"
__status__= "development"
__version__="0.1"

"""
Files: RDP clasfction from Pyro-454 sequencing. Processed by old pipelines
at TGen. Unput FASTA seqs have strt_SAMPLE_NAME_end_DNA_none pattern

Takes in confidence, RDP output
Confidence -c flag
RDP output -R flag

It create a tab delimited file
Headers contain microbiome community 

"""
import sys

#
if sys.version_info < (2,7):
    print "Python 2.7+ are needed for script"
    exit(1)
##

def print_help():
    print "RDP Excel version: ",__version__
    print "python module takes in RDP output, OTU map generated by QIIME 1.9.1, confidence threshold for RDP and run name"
    print "\t\t main.py -c <confidence> -n <run_name> -m <otu-map> -r <rdp_output>"
    print "\t\t -c confidence used to filter output"
    print "\t\t\t Default confidence 0.8"
    print "\t\t -r RDP file output after running RDP"
    print "\t\t -n run-name, log will be generated on this name"
    print "\t\t\t default run name - def_run"
    print "A log file is created with format %Y%m%d%H%M%S.log"
    print "Copyright (c) Price Lab"
    sys.exit()
#} print_help ends

if(len(sys.argv) ==1):
    print_help()
#
import argparse
import logging

from parse_files import *
from sanity_test.test_parameters import check_inputs
#         
def main(**_temp_dict):
#{
    from time import strftime
    current_time=strftime("%Y%m%d%H%M%S")

    log_file_name=_temp_dict['run_name']+"_"+current_time+".log"
    logging.basicConfig(filename=log_file_name,format='%(asctime)s %(message)s',datefmt='%m/%d/%Y %I:%M:%S %p',level=logging.DEBUG)
    logging.debug("Thanks for using RDP excel. Version %s" %(__version__))
     
    _temp_dict['log_file']=log_file_name
    rdp_file=check_inputs(**_temp_dict)
    
    logging.debug("Input file are correct ")
    read_rdp_clsfctn(rdp_file)
    return log_file_name

#} Function ends
if __name__=="__main__":
    
    #make a dict of arguments
    parser=argparse.ArgumentParser("description")
    parser.add_argument ('-c', '--conf', help='confidence threshold',type=float,default=0.8,required=False) # store Confidence thrshold
    parser.add_argument ('-r','--rdp_file',help='RDP out file',required=True) # store RDP output file 
    parser.add_argument ('-n','--run_name',help='run name',required=False,default="def_run") # store run name
    args_dict = vars(parser.parse_args()) # make them dict..
    log_file_name=main(**args_dict)

    print "Please check %s" %(log_file_name)
